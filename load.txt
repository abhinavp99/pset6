/**
 * Parses a request-line, storing its absolute-path at abs_path 
 * and its query string at query, both of which are assumed
 * to be at least of length LimitRequestLine + 1.
 */
bool parse(const char* line, char* abs_path, char* query)
{
    for(int i = 0; i < sizeof(abs_path); i++)
    {
        abs_path[i] = ' ';
    }
    for(int i = 0; i < sizeof(query); i++)
    {
            query[i] = ' ';
    }    
    char a = '/';
    char* temp = NULL;
    char* slash  = malloc(1);
    slash[0] = a;
    char* sec_space = NULL;
    //char* temp = NULL;
    //char* temp1 = NULL;
    char* targ = strchr(line, ' ');
    //finds position of question mark if present or uses the next space
    if(!(strchr(targ, '?')))
    {
        temp = strchr((targ+1), ' ');
 
    }
    else
    {
        temp = strchr(targ, '?'); 
        temp2 = strchr(temp , ' ');
    }
    
    //finds http version string
    char* temp1 = strchr((targ+1), ' ');
    targ = targ + 1;

    if(temp != NULL)
    {   
        //long i = (long) targ;
        for(int i = 0; i < (long) temp - (long) targ; i++)
        {
            abs_path[i] = targ[i];
            if(i+1 ==  (long) temp - (long) targ)
            {
                abs_path[i+1] = '\0';
            }
        }
        if(temp != temp1)
        {
            for(int i = 0; i < (long) temp1 - (long) targ; i++)
            {
                query[i] = targ[i];
            }
        }
        else
        {
            query[0] = '\0';
        }
    }
   
    
   if(strchr(query, '"') && abs_path[0] != '/')
   {
        error(400);
        return false;
   }
    
    if(strncmp(line,"GET ",4))
    {
        error(405);
        return false;
    }
    if((strncmp(targ, (const char*) slash, 1)))
    {
        error(501);
        return false;
    }
    temp = strchr(targ,'\"');
    if( temp != NULL)
    {
        error(400);
        return false;
    }
    sec_space = strrchr(line, ' ');
    if(strstr(sec_space, "HTTP/1.1") == NULL)
    {
        error(505);
        return false;
    }
    free(slash);
    //free(sec_space);
    //free(temp);
    
    //free(temp1);
    
    //free(targ);
    
    return true;
    
}





/**
 * Returns MIME type for supported extensions, else NULL.
 */
const char* lookup(const char* path)
{
    if(path == NULL)
    {
    
        return NULL;
    }
    //char* name = NULL;
    char* index = strrchr(path,'.');
    //strcpy(name,index);
    for(int i =0; i < strlen(index) +1; i++)
    {
        index[i] =tolower(index[i]);
        
    }
    
    if(!(strcmp(index,".css")))
    {
        return "text/css";
    }
    else if(!(strcmp(index,".html")))
    {
        return "text/html";
    }
    else if(!(strcmp(index,".gif")))
    {
        return "image/gif";
    }
    else if(!(strcmp(index,".ico")))
    {
        return "image/x-icon";
    }
    else if(!(strcmp(index,".jpg")))
    {
        return "image/jpeg";
    }
    else if(!(strcmp(index,".js")))
    {
        return "text/javascript";
    }
    else if(!(strcmp(index,".php")))
    {
        return "text/x-php";
    }
    else if(!(strcmp(index,".png")))
    {
         return "images/png";
    }
    else
    {
        return NULL;
    }
}



/**
 * Loads a file into memory dynamically allocated on heap.
 * Stores address thereof in *content and length thereof in *length.
 */
bool load(FILE* file, BYTE** content, size_t* length)
{
    if(file == NULL)
    {
        return false;
    }
    int c = 1;
    int count = 0;
    char* buffer = malloc(sizeof(char));
    //char* apple = buffer;
    while(c != EOF)
    {
        c = fgetc(file);
        buffer[count] = c;
        count++;
        buffer = realloc(buffer, count + 1);
    }
    buffer = realloc(buffer,count-1);
    buffer[count-1]= '\0';
    *content = buffer;
    *length = count;
    fclose(file);
    return true;
}

/**
 * Checks, in order, whether index.php or index.html exists inside of path.
 * Returns path to first match if so, else NULL.
 */
char* indexes(const char* path)
{
    char* p_copy = malloc(strlen(path) +1 + 90);
    for(int i = 0; i <= strlen(path); i++)
    {
        p_copy[i] = path[i];
    }
    //strcpy(p_copy, path);
    char* index_php = "index.php/";
    char* index_html = "index.html/";
    //char* php = NULL;
    //char* html = NULL;
    char* ht_copy = malloc(sizeof(p_copy) + 40);
    char* php_copy = malloc(sizeof(p_copy) + 40);
    for(int i = 0; i <strlen(p_copy); i++)
    {
        ht_copy[i] = p_copy[i];
    }
    for(int i = 0; i <strlen(p_copy); i++)
    {
        php_copy[i] = p_copy[i];
    }
    
   // strcat(php_copy, index_php);
    FILE* fp = NULL;
    fp = fopen(index_php,"r");
    if(fp != NULL)
    {
        return index_php;

        //return php_copy;
        free(p_copy);
        //free(php_copy);
        //free(ht_copy);
        fclose(fp);
    }
    
    //strcat(ht_copy, index_html);
    FILE* fp1 = fopen(index_html,"r");
    if(fp1 != NULL)
    {
        return index_html;
        //return ht_copy;
        free(p_copy);
        //free(ht_copy);
        //free(php_copy);
        fclose(fp1);
    }
    else
    {
        return NULL;    
        free(p_copy);
        fclose(fp1);
        //free(php_copy);

    }
    free(php_copy);
    free(ht_copy);    
}
